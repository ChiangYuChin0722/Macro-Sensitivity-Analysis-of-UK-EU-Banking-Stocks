# -*- coding: utf-8 -*-
"""Macroeconomic Sensitivity Analysis of UK & European Banking Stocks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NWlvaeWiHHNr1H8Lm6r6nwg8_i3px64F
"""

pip install pandas yfinance matplotlib seaborn statsmodels

# --- 1. Define the stock universe ---
# Major UK & EU banks (London- and EU-listed)
stocks = ['BARC.L', 'HSBA.L', 'LLOY.L', 'NWG.L', 'DBK.DE', 'BNP.PA']

# --- 2. Define macroeconomic variables ---
# ^TNX = US 10-year yield (proxy for interest rates)
# GBPUSD=X = GBP/USD exchange rate
macro = ['^TNX', 'GBPUSD=X']

# --- 3. Download daily closing prices (2020–2025) ---
# Turn off auto_adjust to get original adjusted-close structure
data = yf.download(stocks + macro,
                   start="2020-01-01",
                   end="2025-01-01",
                   auto_adjust=False)['Close']

# --- 4. Clean and inspect data ---
# Drop rows with missing values to avoid plotting gaps
data = data.dropna()
print("Data shape:", data.shape)
print("Columns:", list(data.columns))

# --- 5. Plot normalized price performance ---
plt.style.use("seaborn-v0_8")
plt.figure(figsize=(12,6))

# Normalize each stock's price to its first available value
for s in stocks:
    plt.plot(data.index, data[s] / data[s].iloc[0], label=s)

plt.title("Normalized Stock Performance of Major UK & EU Banks (2020–2025)", fontsize=13)
plt.xlabel("Date")
plt.ylabel("Normalized Close Price (Base = 1)")
plt.legend()
plt.ylim(0.5, 2.5)   # widen y-axis to show real divergence
plt.grid(True, alpha=0.3)
plt.show()

# --- 6. Compute daily returns ---
# Percentage daily change for all variables
returns = data.pct_change().dropna()

# Separate equity returns and macro factors
stock_returns = returns[stocks]
macro_returns = returns[['^TNX', 'GBPUSD=X']]

# --- 7. Run OLS regressions: each stock vs. macro variables ---
results = {}
for s in stocks:
    # Dependent variable: daily stock return
    y = stock_returns[s]
    # Independent variables: rate change and FX change (+ constant)
    X = sm.add_constant(macro_returns)
    model = sm.OLS(y, X).fit()
    results[s] = model.params

# Combine all regression coefficients into one DataFrame
df_beta = pd.DataFrame(results).T
df_beta.columns = ['Constant', 'Rate_Beta(^TNX)', 'FX_Beta(GBPUSD)']
print("\n--- Regression Beta Coefficients ---")
print(df_beta)
df_beta.to_csv("bank_macro_sensitivity.csv")

# --- 8. Visualize beta coefficients (heatmap) ---
plt.figure(figsize=(8,5))
sns.heatmap(df_beta[['Rate_Beta(^TNX)', 'FX_Beta(GBPUSD)']],
            annot=True, cmap="coolwarm", fmt=".3f")
plt.title("Macro Beta Sensitivity (UK & EU Banks)", fontsize=13)
plt.ylabel("Bank")
plt.show()

# --- 9. Example: visualize relationship between rate change & Barclays return ---
plt.figure(figsize=(10,6))
sns.regplot(x=returns['^TNX'],             # Change in 10Y yield
            y=stock_returns['BARC.L'],     # Barclays daily return
            scatter_kws={'alpha':0.3})
plt.title("Barclays Return vs 10Y Yield Change", fontsize=13)
plt.xlabel("Δ 10Y Yield (%)")
plt.ylabel("Barclays Daily Return (%)")
plt.grid(True, alpha=0.3)
plt.show()

